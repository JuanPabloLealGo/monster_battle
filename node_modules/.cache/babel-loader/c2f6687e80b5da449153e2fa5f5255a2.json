{"ast":null,"code":"import { createReducer } from '@reduxjs/toolkit';\nimport { getRandomMonster } from '../../utils';\nimport { fetchMonstersData, setSelectedMonster, setComputersMonster } from './monsters.actions';\nconst initialState = {\n  monsters: [],\n  selectedMonster: null,\n  computersMonster: null,\n  battleResult: null\n};\nexport const monstersReducer = createReducer(initialState, builder => {\n  builder.addCase(fetchMonstersData.pending, state => ({ ...state,\n    monsters: []\n  }));\n  builder.addCase(fetchMonstersData.rejected, state => ({ ...state,\n    monsters: []\n  }));\n  builder.addCase(fetchMonstersData.fulfilled, (state, action) => ({ ...state,\n    monsters: action.payload\n  }));\n  builder.addCase(setSelectedMonster, (state, action) => ({ ...state,\n    selectedMonster: action.payload\n  }));\n  builder.addCase(setComputersMonster, state => ({ ...state,\n    computersMonster: getRandomMonster(state.monsters, state.selectedMonster)\n  }));\n});","map":{"version":3,"names":["createReducer","getRandomMonster","fetchMonstersData","setSelectedMonster","setComputersMonster","initialState","monsters","selectedMonster","computersMonster","battleResult","monstersReducer","builder","addCase","pending","state","rejected","fulfilled","action","payload"],"sources":["/Users/fusion/Development/challenges/assessment-cc-react-sr-01/src/reducers/monsters/monsters.reducer.ts"],"sourcesContent":["import { createReducer, PayloadAction } from '@reduxjs/toolkit';\nimport { MonsterBattleResult } from '../../models/interfaces/monster-battle-result.interface';\nimport { Monster } from '../../models/interfaces/monster.interface';\nimport { getRandomMonster } from '../../utils';\nimport { fetchMonstersData, setSelectedMonster, setComputersMonster } from './monsters.actions';\n\ninterface MonsterState {\n  monsters: Monster[];\n  selectedMonster: Monster | null;\n  computersMonster: Monster | null;\n  battleResult: MonsterBattleResult | null;\n}\n\nconst initialState: MonsterState = {\n  monsters: [],\n  selectedMonster: null,\n  computersMonster: null,\n  battleResult: null,\n};\n\nexport const monstersReducer = createReducer(initialState, (builder) => {\n  builder.addCase(fetchMonstersData.pending, (state: MonsterState) => ({\n    ...state,\n    monsters: [],\n  }));\n\n  builder.addCase(fetchMonstersData.rejected, (state: MonsterState) => ({\n    ...state,\n    monsters: [],\n  }));\n\n  builder.addCase(fetchMonstersData.fulfilled, (state: MonsterState, action: PayloadAction<Monster[]>) => ({\n    ...state,\n    monsters: action.payload,\n  }));\n\n  builder.addCase(setSelectedMonster, (state: MonsterState, action: PayloadAction<Monster | null>) => ({\n    ...state,\n    selectedMonster: action.payload,\n  }));\n\n  builder.addCase(setComputersMonster, (state: MonsterState) => ({\n    ...state,\n    computersMonster: getRandomMonster(state.monsters, state.selectedMonster),\n  }))\n});\n"],"mappings":"AAAA,SAASA,aAAT,QAA6C,kBAA7C;AAGA,SAASC,gBAAT,QAAiC,aAAjC;AACA,SAASC,iBAAT,EAA4BC,kBAA5B,EAAgDC,mBAAhD,QAA2E,oBAA3E;AASA,MAAMC,YAA0B,GAAG;EACjCC,QAAQ,EAAE,EADuB;EAEjCC,eAAe,EAAE,IAFgB;EAGjCC,gBAAgB,EAAE,IAHe;EAIjCC,YAAY,EAAE;AAJmB,CAAnC;AAOA,OAAO,MAAMC,eAAe,GAAGV,aAAa,CAACK,YAAD,EAAgBM,OAAD,IAAa;EACtEA,OAAO,CAACC,OAAR,CAAgBV,iBAAiB,CAACW,OAAlC,EAA4CC,KAAD,KAA0B,EACnE,GAAGA,KADgE;IAEnER,QAAQ,EAAE;EAFyD,CAA1B,CAA3C;EAKAK,OAAO,CAACC,OAAR,CAAgBV,iBAAiB,CAACa,QAAlC,EAA6CD,KAAD,KAA0B,EACpE,GAAGA,KADiE;IAEpER,QAAQ,EAAE;EAF0D,CAA1B,CAA5C;EAKAK,OAAO,CAACC,OAAR,CAAgBV,iBAAiB,CAACc,SAAlC,EAA6C,CAACF,KAAD,EAAsBG,MAAtB,MAA4D,EACvG,GAAGH,KADoG;IAEvGR,QAAQ,EAAEW,MAAM,CAACC;EAFsF,CAA5D,CAA7C;EAKAP,OAAO,CAACC,OAAR,CAAgBT,kBAAhB,EAAoC,CAACW,KAAD,EAAsBG,MAAtB,MAAiE,EACnG,GAAGH,KADgG;IAEnGP,eAAe,EAAEU,MAAM,CAACC;EAF2E,CAAjE,CAApC;EAKAP,OAAO,CAACC,OAAR,CAAgBR,mBAAhB,EAAsCU,KAAD,KAA0B,EAC7D,GAAGA,KAD0D;IAE7DN,gBAAgB,EAAEP,gBAAgB,CAACa,KAAK,CAACR,QAAP,EAAiBQ,KAAK,CAACP,eAAvB;EAF2B,CAA1B,CAArC;AAID,CAzB2C,CAArC"},"metadata":{},"sourceType":"module"}