{"ast":null,"code":"var _jsxFileName = \"/Users/fusion/Development/challenges/assessment-cc-react-sr-01/src/components/monsters-list/MonstersList.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { useAppDispatch } from \"../../app/hooks\";\nimport { setSelectedMonster } from \"../../reducers/monsters/monsters.actions\";\nimport { Image, ListTitle, MonsterCard, MonsterName, MonstersSection } from \"./MonstersList.styled\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MonstersList = _ref => {\n  _s();\n\n  let {\n    monsters\n  } = _ref;\n  const dispatch = useAppDispatch();\n  const [selectedMonsterId, setSelectedMonsterId] = useState(null);\n\n  const handleMonsterClick = monster => {\n    const value = selectedMonsterId === monster.id ? null : monster.id;\n    setSelectedMonsterId(value);\n    dispatch(setSelectedMonster(!value ? null : monster));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(ListTitle, {\n      children: monsters.length > 0 ? 'Select your monster' : 'No monsters available'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(MonstersSection, {\n      \"data-testid\": \"monsters-list-section\",\n      children: monsters.map(monster => /*#__PURE__*/_jsxDEV(MonsterCard, {\n        onClick: () => handleMonsterClick(monster),\n        selected: monster.id === selectedMonsterId,\n        \"data-testid\": monster.id,\n        children: [/*#__PURE__*/_jsxDEV(Image, {\n          src: monster.imageUrl\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(MonsterName, {\n          children: monster.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 25\n        }, this)]\n      }, monster.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 9\n  }, this);\n};\n\n_s(MonstersList, \"log+LRJt859c4j6osz4W6ZP9YzI=\", false, function () {\n  return [useAppDispatch];\n});\n\n_c = MonstersList;\nexport { MonstersList };\n\nvar _c;\n\n$RefreshReg$(_c, \"MonstersList\");","map":{"version":3,"names":["useState","useAppDispatch","setSelectedMonster","Image","ListTitle","MonsterCard","MonsterName","MonstersSection","MonstersList","monsters","dispatch","selectedMonsterId","setSelectedMonsterId","handleMonsterClick","monster","value","id","length","map","imageUrl","name"],"sources":["/Users/fusion/Development/challenges/assessment-cc-react-sr-01/src/components/monsters-list/MonstersList.tsx"],"sourcesContent":["import { useState } from \"react\"\nimport { useAppDispatch } from \"../../app/hooks\"\nimport { Monster } from \"../../models/interfaces/monster.interface\"\nimport { setSelectedMonster } from \"../../reducers/monsters/monsters.actions\"\nimport { Image, ListTitle, MonsterCard, MonsterName, MonstersSection } from \"./MonstersList.styled\"\n\ntype MonstersListProps = {\n    monsters: Monster[]\n}\n\nconst MonstersList: React.FC<MonstersListProps> = ({ monsters }) => {\n    const dispatch = useAppDispatch();\n\n    const [selectedMonsterId, setSelectedMonsterId] = useState<string | null>(null);\n\n    const handleMonsterClick = (monster: Monster) => {\n        const value = selectedMonsterId === monster.id ? null : monster.id\n        setSelectedMonsterId(value)\n        dispatch(setSelectedMonster(!value ? null : monster));\n    }\n\n    return (\n        <div>\n            <ListTitle>{monsters.length > 0 ? 'Select your monster': 'No monsters available'}</ListTitle>\n\n            <MonstersSection data-testid=\"monsters-list-section\">\n                {monsters.map(monster => (\n                    <MonsterCard key={monster.id} onClick={() => handleMonsterClick(monster)} selected={monster.id === selectedMonsterId} data-testid={monster.id}>\n                        <Image src={monster.imageUrl} />\n                        <MonsterName>\n                            {monster.name}\n                        </MonsterName>\n                    </MonsterCard>\n                ))}\n            </MonstersSection>\n        </div>\n    )\n}\n\nexport { MonstersList }"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,cAAT,QAA+B,iBAA/B;AAEA,SAASC,kBAAT,QAAmC,0CAAnC;AACA,SAASC,KAAT,EAAgBC,SAAhB,EAA2BC,WAA3B,EAAwCC,WAAxC,EAAqDC,eAArD,QAA4E,uBAA5E;;;AAMA,MAAMC,YAAyC,GAAG,QAAkB;EAAA;;EAAA,IAAjB;IAAEC;EAAF,CAAiB;EAChE,MAAMC,QAAQ,GAAGT,cAAc,EAA/B;EAEA,MAAM,CAACU,iBAAD,EAAoBC,oBAApB,IAA4CZ,QAAQ,CAAgB,IAAhB,CAA1D;;EAEA,MAAMa,kBAAkB,GAAIC,OAAD,IAAsB;IAC7C,MAAMC,KAAK,GAAGJ,iBAAiB,KAAKG,OAAO,CAACE,EAA9B,GAAmC,IAAnC,GAA0CF,OAAO,CAACE,EAAhE;IACAJ,oBAAoB,CAACG,KAAD,CAApB;IACAL,QAAQ,CAACR,kBAAkB,CAAC,CAACa,KAAD,GAAS,IAAT,GAAgBD,OAAjB,CAAnB,CAAR;EACH,CAJD;;EAMA,oBACI;IAAA,wBACI,QAAC,SAAD;MAAA,UAAYL,QAAQ,CAACQ,MAAT,GAAkB,CAAlB,GAAsB,qBAAtB,GAA6C;IAAzD;MAAA;MAAA;MAAA;IAAA,QADJ,eAGI,QAAC,eAAD;MAAiB,eAAY,uBAA7B;MAAA,UACKR,QAAQ,CAACS,GAAT,CAAaJ,OAAO,iBACjB,QAAC,WAAD;QAA8B,OAAO,EAAE,MAAMD,kBAAkB,CAACC,OAAD,CAA/D;QAA0E,QAAQ,EAAEA,OAAO,CAACE,EAAR,KAAeL,iBAAnG;QAAsH,eAAaG,OAAO,CAACE,EAA3I;QAAA,wBACI,QAAC,KAAD;UAAO,GAAG,EAAEF,OAAO,CAACK;QAApB;UAAA;UAAA;UAAA;QAAA,QADJ,eAEI,QAAC,WAAD;UAAA,UACKL,OAAO,CAACM;QADb;UAAA;UAAA;UAAA;QAAA,QAFJ;MAAA,GAAkBN,OAAO,CAACE,EAA1B;QAAA;QAAA;QAAA;MAAA,QADH;IADL;MAAA;MAAA;MAAA;IAAA,QAHJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AAgBH,CA3BD;;GAAMR,Y;UACeP,c;;;KADfO,Y;AA6BN,SAASA,YAAT"},"metadata":{},"sourceType":"module"}